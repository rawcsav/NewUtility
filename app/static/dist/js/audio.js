document.addEventListener("DOMContentLoaded",function(){function getCsrfToken(){return document.querySelector('meta[name="csrf-token"]').getAttribute("content");}
function debounce(func,wait,immediate){let timeout;return function(){const context=this,args=arguments;const later=function(){timeout=null;if(!immediate)func.apply(context,args);};const callNow=immediate&&!timeout;clearTimeout(timeout);timeout=setTimeout(later,wait);if(callNow)func.apply(context,args);};}
function showToast(message,type){let toast=document.getElementById("toast");if(!toast){toast=document.createElement("div");toast.id="toast";document.body.appendChild(toast);}
toast.textContent=message;toast.className=type;toast.style.display="flex";toast.style.opacity="1";setTimeout(()=>{toast.style.opacity="0";setTimeout(()=>{toast.style.display="none";},600);},3000);}
function setupPromptToggle(formId,radioName,manualGroup,generateGroup){const radioButtons=document.querySelectorAll(formId+' input[name="'+radioName+'"]',);const manualPromptGroup=document.querySelector(manualGroup);const generatePromptGroup=document.querySelector(generateGroup);function setupRadioListeners(){radioButtons.forEach((radio)=>{radio.addEventListener("change",(event)=>{switch(event.target.value){case"manual":manualPromptGroup.style.display="flex";generatePromptGroup.style.display="none";break;case"generate":manualPromptGroup.style.display="none";generatePromptGroup.style.display="flex";break;default:manualPromptGroup.style.display="none";generatePromptGroup.style.display="none";break;}});});}
setupRadioListeners();const checkedRadioButton=document.querySelector(formId+' input[name="'+radioName+'"]:checked',);if(checkedRadioButton){checkedRadioButton.dispatchEvent(new Event("change"));}}
function handleFormSubmission(formId,endpoint,isTTS=false){const form=document.getElementById(formId);form.addEventListener("submit",function(event){event.preventDefault();const formData=new FormData(form);fetch(endpoint,{method:"POST",body:formData,headers:{"X-CSRFToken":getCsrfToken(),},}).then((response)=>response.json()).then((data)=>{if(data.status==="success"){showToast(`${formId}completed successfully.`,"success");}else{showToast(`Error during ${formId}.`,"error");}}).catch((error)=>{showToast("An unexpected error occurred."+error,"error");});});}
handleFormSubmission("tts-form","/audio/generate_tts",true);handleFormSubmission("transcription-form","/audio/transcription");handleFormSubmission("translation-form","/audio/translation");function handlePreferencesFormSubmission(formId,endpoint){const form=document.getElementById(formId);const debouncedSubmit=debounce(function(){const formData=new FormData(form);fetch(endpoint,{method:"POST",body:formData,headers:{"X-CSRFToken":getCsrfToken(),},}).then((response)=>response.json()).then((data)=>{if(data.status==="success"){showToast(`Preferences updated successfully.`,"success");}else{showToast(`Error updating preferences.`,"error");}}).catch((error)=>{showToast("An unexpected error occurred while updating preferences."+error,"error",);});},2000);form.addEventListener("input",debouncedSubmit);}
handlePreferencesFormSubmission("tts-preferences-form","/audio/tts_preferences",);handlePreferencesFormSubmission("whisper-preferences-form","/audio/whisper_preferences",);function removeActiveClassFromButtons(){document.querySelectorAll(".utility-toggle i").forEach((icon)=>{icon.classList.remove("active");});}
function setActiveButton(buttonElement){removeActiveClassFromButtons();if(buttonElement){buttonElement.classList.add("active");}}
function displayUtility(utilityName){const utilities=document.querySelectorAll(".utility");utilities.forEach((utility)=>{utility.style.display=utility.id===`${utilityName}-utility`?"flex":"none";});const ttsPreferencesForm=document.getElementById("tts-preferences-form");if(ttsPreferencesForm)
ttsPreferencesForm.style.display=utilityName==="tts"?"flex":"none";const whisperPreferencesForm=document.getElementById("whisper-preferences-form",);if(whisperPreferencesForm){whisperPreferencesForm.style.display=utilityName==="transcription"||utilityName==="translation"?"flex":"none";const formTitle=whisperPreferencesForm.querySelector("h3");if(formTitle){formTitle.textContent=utilityName.charAt(0).toUpperCase()+utilityName.slice(1);}
const languageOption=whisperPreferencesForm.querySelector(".form-group.language",);if(languageOption){languageOption.style.display=utilityName==="transcription"?"block":"none";}}}
const utilityIcons=document.querySelectorAll(".utility-toggle i");utilityIcons.forEach((icon)=>{icon.addEventListener("click",function(){const selectedUtility=this.dataset.utility;displayUtility(selectedUtility);setActiveButton(this);});});if(utilityIcons.length>0){const firstUtilityIcon=utilityIcons[0];firstUtilityIcon.click();setActiveButton(firstUtilityIcon);}
setupPromptToggle("#transcription-form","prompt_option","#manual-prompt-group","#generate-prompt-group",);setupPromptToggle("#translation-form","prompt_option","#manual-prompt-group","#generate-prompt-group",);function toggleDetails(jobId,jobType){var detailsElement=document.getElementById(jobType+"-details-"+jobId);var isVisible=detailsElement.style.display==="block";detailsElement.style.display=isVisible?"none":"block";}
function appendJobHistory(job,jobType){const baseUrl=window.location.origin;let downloadUrl;switch(jobType){case"tts":downloadUrl=`${baseUrl}/audio/download_tts/${job.output_filename}`;break;case"transcription":case"translation":downloadUrl=`${baseUrl}/audio/download_whisper/${job.id}`;break;default:console.error("Invalid job type");return;}
let jobDetailsHtml="";if(jobType==="tts"){jobDetailsHtml=`<p>Model:${job.model}</p><p>Speed:${job.speed}</p><audio controls><source src="${downloadUrl}"type="audio/mpeg"/>Your browser does not support the audio element.</audio>`;}else if(jobType==="transcription"){jobDetailsHtml=`<p>Language:${job.language}</p><p>Model:${job.model}</p><p>Temperature:${job.temperature}</p><p>Prompt:${job.prompt}</p>`;}else if(jobType==="translation"){jobDetailsHtml=`<p>Model:${job.model}</p><p>Temperature:${job.temperature}</p><p>Prompt:${job.prompt}</p>`;}
const historyEntry=document.createElement("li");historyEntry.className="history-entry";historyEntry.dataset.jobId=job.id;historyEntry.dataset.jobType=jobType;historyEntry.innerHTML=`<div class="history-summary"><span class="history-title">${jobType==="tts"?job.voice:job.original_filename.substring(0,10)+
(job.output_filename&&job.output_filename.length>10?"...":"")}</span><br/><span class="history-time">${job.created_at}</span></div><div class="history-details"id="${jobType}-details-${
      job.id
    }"style="display: none">${jobDetailsHtml}<a href="${downloadUrl}"download>Download ${jobType.charAt(0).toUpperCase()+jobType.slice(1)}</a></div>`;historyEntry.addEventListener("click",function(){toggleDetails(job.id,jobType);});const parentElementId=`${jobType}-history`;const parentElement=document.getElementById(parentElementId);if(parentElement){parentElement.querySelector("ul").appendChild(historyEntry);}else{console.error("Parent element not found for job type:",jobType);}}
function updateAudioMessages(message,status){var messageDiv=document.getElementById("update-text");messageDiv.innerHTML=message.replace(/\n/g,"<br>");messageDiv.className=status;}
var socket=io("/audio");socket.on("task_progress",function(data){updateAudioMessages(data.message,"information");});socket.on("task_complete",function(data){updateAudioMessages(data.message,"success");appendJobHistory(data.job_details,data.job_type,function(entry){entry.addEventListener("click",function(){toggleDetails(data.job_details.id,data.job_type);});});});socket.on("task_update",function(data){if(data.status==="error"){updateAudioMessages("Error: "+data.error,"error");}});document.querySelectorAll(".history-entry").forEach((entry)=>{const jobId=entry.dataset.jobId;const jobType=entry.dataset.jobType;entry.addEventListener("click",function(){toggleDetails(jobId,jobType);});});});